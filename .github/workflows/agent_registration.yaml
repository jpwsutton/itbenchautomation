name: Register a new agent
on:
  issues:
    types: [labeled]

jobs:
  register_agent:
    if: github.event.label.name == 'approved'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: onboarding
    name: Registers an Agent
    steps:
      - name: Parse issue
        id: parse
        uses: onmax/issue-form-parser@v1.6
        with:
          issue_number: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Examples on how to use the output
      - name: Show parsed payload data
        run: |
          echo '${{ steps.parse.outputs.payload }}'
      - name: Comment on issue
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            Thank you for submitting your agent registration details, we are currently processing your request and will
            be in contact shortly with connection details for your agent harness to use to connect to the IT Bench service.

            ## Agent Details:

            Name:  ${{ fromJson(steps.parse.outputs.payload)['Agent Name'] }}
            Type:  ${{ fromJson(steps.parse.outputs.payload)['Agent Type'] }}
            Level:  ${{ fromJson(steps.parse.outputs.payload)['Agent Level'] }}

            Target Config Repo: ${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}
        
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_BODY
            })
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['registering']
            })
      - name: mock-generate-manifest
        id: generate-manifest
        run: |
          manifest_token="this_is_a_placeholder_for_the_token"
          manifest_endpoint="https://ibm.com"
          manifest=$(jq -n --arg token $manifest_token --arg manifest_endpoint $manifest_endpoint '{token: $token, manifest_endpoint: $manifest_endpoint}')
          echo "manifest=$( echo $manifest | base64 -w 0)" >> "$GITHUB_OUTPUT"
          agent_repo="${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}"
          agent_repo_owner="$(echo $agent_repo | awk -F/ '{print $4}')"
          agent_repo_name="$(echo $agent_repo | awk -F/ '{print $5}')"
          echo $agent_repo_owner
          echo $agent_repo_name
          echo "agent_repo_owner=$agent_repo_owner" >> "$GITHUB_OUTPUT"
          echo "agent_repo_name=$agent_repo_name" >> "$GITHUB_OUTPUT"

      - name: Generate GitHub token on behalf of repo
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ITBENCH_APP_ID }}
          private-key: ${{ secrets.ITBENCH_APP_KEY }}
          owner: ${{ steps.generate-manifest.outputs.agent_repo_owner}}
          repositories: ${{ steps.generate-manifest.outputs.agent_repo_name}}


      - name: Push manifest to config repository
        id: file-push
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api octocat

          repo_full_path="repos/${{ steps.generate-manifest.outputs.agent_repo_owner}}/${{ steps.generate-manifest.outputs.agent_repo_name}}/contents/agent-manifest.json"

          echo "Repo Path: $repo_full_path"

          current_sha=$(gh api $repo_full_path -q '.sha' || echo "")
          
          echo "Current SHA: $current_sha"

          gh api -X PUT \
          -H "Accept: application/vnd.github.v3+json" \
          $repo_full_path \
          -f message="Add agent-manifest.json via API" \
          -f content="${{ steps.generate-manifest.outputs.manifest}}" \
          -f branch="main" \ 
          -f sha="$current_sha"  >> gh_out.json

          file_path=$(cat gh_out.json | jq .content.html_url)

          echo "File path: $file_path"

          echo "manifest_path=$file_path" >> "$GITHUB_OUTPUT"



      - name: Comment on issue
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            The registration of your agent is now complete.

            Your agent manifest is located at: ${{ steps.file-push.output.manifest_path}}


            ## Agent Details:

            Name:  ${{ fromJson(steps.parse.outputs.payload)['Agent Name'] }}
            Type:  ${{ fromJson(steps.parse.outputs.payload)['Agent Type'] }}
            Level:  ${{ fromJson(steps.parse.outputs.payload)['Agent Level'] }}

            Target Config Repo: ${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}
        
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_BODY
            })
            
