name: Register a new agent
on:
  issues:
    types: [labeled]

jobs:
  register_agent:
    if: github.event.label.name == 'approved'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: onboarding
    name: Registers an Agent
    steps:
      - name: Parse issue
        id: parse
        uses: onmax/issue-form-parser@v1.6
        with:
          issue_number: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Examples on how to use the output
      - name: Show parsed payload data
        run: |
          echo '${{ steps.parse.outputs.payload }}'
      - name: mock-generate-manifest
        id: generate-manifest
        run: |
          echo "manifest_token=deadbeefcafe" >> "$GITHUB_OUTPUT"
          echo "manifest_endpoint=https://ibm.com" >> "$GITHUB_OUTPUT"
          agent_repo="${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}""
          agent_repo_owner="$(echo $agent_repo | awk -F/ '{print $4}')"
          agent_repo_name="$(echo $agent_repo | awk -F/ '{print $5}')"
          echo "agent_repo_owner=$agent_repo_owner" >> "$GITHUB_OUTPUT"
          echo "agent_repo_name=$agent_repo_name" >> "$GITHUB_OUTPUT"

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ITBENCH_APP_ID }}
          private-key: ${{ secrets.ITBENCH_APP_KEY }}
          owner: ${{ steps.generate-manifest.output.agent_repo_owner}}
          repositories: ${{ steps.generate-manifest.output.agent_repo_name}}


      - name: Use the token
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api octocat

      - name: Comment on issue
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            Thank you for submitting your agent registration details, we are currently processing your request and will
            be in contact shortly with connection details for your agent harness to use to connect to the IT Bench service.

            ## Agent Details:

            Name:  ${{ fromJson(steps.parse.outputs.payload)['Agent Name'] }}
            Type:  ${{ fromJson(steps.parse.outputs.payload)['Agent Type'] }}
            Level:  ${{ fromJson(steps.parse.outputs.payload)['Agent Level'] }}

            Target Config Repo: ${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}
        
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_BODY
            })
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['registering']
            })
