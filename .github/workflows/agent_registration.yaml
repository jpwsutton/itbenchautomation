name: Register a new agent
on:
  issues:
    types: [labeled]

jobs:
  register_agent:
    if: github.event.label.name == 'approved'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: onboarding
    name: Registers an Agent
    steps:
      - name: Parse issue
        id: parse
        uses: onmax/issue-form-parser@v1.6
        with:
          issue_number: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Examples on how to use the output
      - name: Show parsed payload data
        run: |
          echo '${{ steps.parse.outputs.payload }}'
      - name: Comment on issue
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            Thank you for submitting your agent registration details, we are currently processing your request and will
            be in contact shortly with connection details for your agent harness to use to connect to the IT Bench service.

            ## Agent Details:

            Name:  ${{ fromJson(steps.parse.outputs.payload)['Agent Name'] }}
            Type:  ${{ fromJson(steps.parse.outputs.payload)['Agent Type'] }}
            Level:  ${{ fromJson(steps.parse.outputs.payload)['Agent Level'] }}

            Target Config Repo: ${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}
        
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_BODY
            })
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['registering']
            })
      - name: mock-generate-manifest
        id: generate-manifest
        run: |
          manifest_token="this_is_a_placeholder_for_the_token"
          manifest_endpoint="https://ibm.com"
          manifest=$(jq -n --arg token $manifest_token --arg manifest_endpoint $manifest_endpoint '{token: $token, manifest_endpoint: $manifest_endpoint}')
          echo "manifest=$( echo $manifest | base64 -w 0)" >> "$GITHUB_OUTPUT"
          agent_repo="${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}"
          agent_repo_owner="$(echo $agent_repo | awk -F/ '{print $4}')"
          agent_repo_name="$(echo $agent_repo | awk -F/ '{print $5}')"
          echo $agent_repo_owner
          echo $agent_repo_name
          echo "agent_repo_owner=$agent_repo_owner" >> "$GITHUB_OUTPUT"
          echo "agent_repo_name=$agent_repo_name" >> "$GITHUB_OUTPUT"

      - name: Generate GitHub token on behalf of repo
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ITBENCH_APP_ID }}
          private-key: ${{ secrets.ITBENCH_APP_KEY }}
          owner: ${{ steps.generate-manifest.outputs.agent_repo_owner}}
          repositories: ${{ steps.generate-manifest.outputs.agent_repo_name}}

      - name: Check repository is private
        id: check-repo-private
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          repo_full_path="repos/${{ steps.generate-manifest.outputs.agent_repo_owner}}/${{ steps.generate-manifest.outputs.agent_repo_name}}"
          repo_private=$(gh api $repo_full_path -q '.private')

          echo "Repo Private: $repo_private"

          if [ "$repo_private" = "true" ]; then
            echo "Target repository is set to private."
          else
            echo "Target repository is not set to private. Failing!"
            echo "error_public_repo=1" >> "$GITHUB_OUTPUT"
            exit 1
          fi


      - name: Push manifest to config repository
        id: file-push
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          set -x
          gh api octocat

          repo_full_path="repos/${{ steps.generate-manifest.outputs.agent_repo_owner}}/${{ steps.generate-manifest.outputs.agent_repo_name}}/contents/agent-manifest.json"

          echo "Repo Path: $repo_full_path"

          current_sha=$(gh api $repo_full_path -q '.sha' || echo "")
          
          echo "Current SHA: $current_sha"

          gh api -X PUT \
          -H "Accept: application/vnd.github.v3+json" \
          $repo_full_path \
          -f message="Add agent-manifest.json via API" \
          -f content="${{ steps.generate-manifest.outputs.manifest}}" \
          -f branch="main" \
          -f sha="$current_sha" >> ghout.json

          if [[ $? -eq 0 ]]; then
            cat ghout.json | jq


            file_path=$(cat ghout.json | jq .content.html_url)
            echo "File path: $file_path"

            echo "manifest_path=$file_path" >> "$GITHUB_OUTPUT"
          fi




      - name: Comment on issue
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            The registration of your agent is now complete.

            Your agent manifest is located at: ${{ steps.file-push.outputs.manifest_path}}


            ## Agent Details:

            Name:  ${{ fromJson(steps.parse.outputs.payload)['Agent Name'] }}
            Type:  ${{ fromJson(steps.parse.outputs.payload)['Agent Type'] }}
            Level:  ${{ fromJson(steps.parse.outputs.payload)['Agent Level'] }}

            Target Config Repo: ${{ fromJson(steps.parse.outputs.payload)['Config Repo']}}
        
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.COMMENT_BODY
            })


      - name: Report Failure
        if: failure()
        uses: actions/github-script@v7
        env:
          PRIVATE_REPO:  ${{ steps.check-repo-private.outputs.error_public_repo == 1}}
          #APP_NOT_INSTALLED: ${{ steps.check-app-installed.outputs.error_not_installed == 1}}
          COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            Unfortunately there was an unknown issue with registering the agent.

            This issue has been marked for manual intervention and the team has been notified.

            ----

            Run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          PRIV_REPO_COMMENT_BODY: |
            ðŸ‘‹ ${{ github.event.issue.user.login }}

            It looks like the repository you've provided to us is not set to private.
            As we will be committing a token to your repository, it needs to be set to private before we can continue.

            Please make the nessesary changes and reply back to this issue, our team will then re-start the registration process.

            ----

            Run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          # APP_NOT_INSTALLED_COMMENT_BODY: |
          #   ðŸ‘‹ ${{ github.event.issue.user.login }}

          #   It looks like the repository does not have the IT Bench GitHub App installed.
            
          #   Please [install the app](https://github.com/apps/ibm-itbench) into your private config repo.

          #   Once the app is installed, comment back on this issue and our team will then re-start the registration process.

          #   ----

          #   Run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        with:
          script: |

            if (process.env.PRIVATE_REPO){
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.PRIV_REPO_COMMENT_BODY
              })
            # } else if(process.env.APP_NOT_INSTALLED){
            #   github.rest.issues.createComment({
            #     issue_number: context.issue.number,
            #     owner: context.repo.owner,
            #     repo: context.repo.repo,
            #     body: process.env.APP_NOT_INSTALLED_COMMENT_BODY
            #   })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.COMMENT_BODY
              })
            }
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['error']
            })
        
            
